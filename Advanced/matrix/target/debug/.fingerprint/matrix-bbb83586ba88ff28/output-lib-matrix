{"$message_type":"diagnostic","message":"`&` without an explicit lifetime name cannot be used here","code":{"code":"E0637","explanation":"`'_` lifetime name or `&T` without an explicit lifetime name has been used\nin an illegal place.\n\nErroneous code example:\n\n```compile_fail,E0106,E0637\nfn underscore_lifetime<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n                     //^^ `'_` is a reserved lifetime name\n    if str1.len() > str2.len() {\n        str1\n    } else {\n        str2\n    }\n}\n\nfn without_explicit_lifetime<T>()\nwhere\n    T: Iterator<Item = &u32>,\n                     //^ `&` without an explicit lifetime name\n{\n}\n\nfn without_hrtb<T>()\nwhere\n    T: Into<&u32>,\n          //^ `&` without an explicit lifetime name\n{\n}\n```\n\nFirst, `'_` cannot be used as a lifetime identifier in some places\nbecause it is a reserved for the anonymous lifetime. Second, `&T`\nwithout an explicit lifetime name cannot also be used in some places.\nTo fix them, use a lowercase letter such as `'a`, or a series\nof lowercase letters such as `'foo`. For more information about lifetime\nidentifier, see [the book][bk-no]. For more information on using\nthe anonymous lifetime in Rust 2018, see [the Rust 2018 blog post][blog-al].\n\nCorrected example:\n\n```\nfn underscore_lifetime<'a>(str1: &'a str, str2: &'a str) -> &'a str {\n    if str1.len() > str2.len() {\n        str1\n    } else {\n        str2\n    }\n}\n\nfn without_explicit_lifetime<'a, T>()\nwhere\n    T: Iterator<Item = &'a u32>,\n{\n}\n\nfn without_hrtb<T>()\nwhere\n    T: for<'foo> Into<&'foo u32>,\n{\n}\n```\n\n[bk-no]: https://doc.rust-lang.org/book/appendix-02-operators.html#non-operator-symbols\n[blog-al]: https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html#more-lifetime-elision-rules\n"},"level":"error","spans":[{"file_name":"src/tensor/mod.rs","byte_start":2922,"byte_end":2923,"line_start":94,"line_end":94,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"impl<T: TensorType + Add<&T, Output = T>, const N: usize> Add for &Tensor<T, N> {","highlight_start":26,"highlight_end":27}],"label":"explicit lifetime name needed here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider introducing a higher-ranked lifetime here","code":null,"level":"help","spans":[{"file_name":"src/tensor/mod.rs","byte_start":2918,"byte_end":2918,"line_start":94,"line_end":94,"column_start":22,"column_end":22,"is_primary":true,"text":[{"text":"impl<T: TensorType + Add<&T, Output = T>, const N: usize> Add for &Tensor<T, N> {","highlight_start":22,"highlight_end":22}],"label":null,"suggested_replacement":"for<'a> ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/tensor/mod.rs","byte_start":2923,"byte_end":2923,"line_start":94,"line_end":94,"column_start":27,"column_end":27,"is_primary":true,"text":[{"text":"impl<T: TensorType + Add<&T, Output = T>, const N: usize> Add for &Tensor<T, N> {","highlight_start":27,"highlight_end":27}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0637]\u001b[0m\u001b[0m\u001b[1m: `&` without an explicit lifetime name cannot be used here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/mod.rs:94:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<T: TensorType + Add<&T, Output = T>, const N: usize> Add for &Tensor<T, N> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexplicit lifetime name needed here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider introducing a higher-ranked lifetime here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: TensorType + \u001b[0m\u001b[0m\u001b[38;5;10mfor<'a> \u001b[0m\u001b[0mAdd<&\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mT, Output = T>, const N: usize> Add for &Tensor<T, N> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Mul`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/tensor/mod.rs","byte_start":37,"byte_end":40,"line_start":1,"line_end":1,"column_start":38,"column_end":41,"is_primary":true,"text":[{"text":"use std::ops::{Add, Index, IndexMut, Mul};","highlight_start":38,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/tensor/mod.rs","byte_start":35,"byte_end":40,"line_start":1,"line_end":1,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"use std::ops::{Add, Index, IndexMut, Mul};","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Mul`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/mod.rs:1:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::ops::{Add, Index, IndexMut, Mul};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `scalar::complex::Complex`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":89,"byte_end":113,"line_start":7,"line_end":7,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use scalar::complex::Complex;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":85,"byte_end":115,"line_start":7,"line_end":8,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use scalar::complex::Complex;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `scalar::complex::Complex`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse scalar::complex::Complex;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `vector::Vector`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":120,"byte_end":134,"line_start":9,"line_end":9,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use vector::Vector;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":116,"byte_end":135,"line_start":9,"line_end":9,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"use vector::Vector;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `vector::Vector`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse vector::Vector;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot add `&T` to `&T`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"src/tensor/mod.rs","byte_start":3253,"byte_end":3261,"line_start":104,"line_end":104,"column_start":25,"column_end":33,"is_primary":false,"text":[{"text":"            result[i] = &self[i] + &rhs[i];","highlight_start":25,"highlight_end":33}],"label":"&T","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/tensor/mod.rs","byte_start":3264,"byte_end":3271,"line_start":104,"line_end":104,"column_start":36,"column_end":43,"is_primary":false,"text":[{"text":"            result[i] = &self[i] + &rhs[i];","highlight_start":36,"highlight_end":43}],"label":"&T","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/tensor/mod.rs","byte_start":3262,"byte_end":3263,"line_start":104,"line_end":104,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"            result[i] = &self[i] + &rhs[i];","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider introducing a `where` clause, but there might be an alternative better way to express this requirement","code":null,"level":"help","spans":[{"file_name":"src/tensor/mod.rs","byte_start":2976,"byte_end":2976,"line_start":94,"line_end":94,"column_start":80,"column_end":80,"is_primary":true,"text":[{"text":"impl<T: TensorType + Add<&T, Output = T>, const N: usize> Add for &Tensor<T, N> {","highlight_start":80,"highlight_end":80}],"label":null,"suggested_replacement":" where &T: Add<&T, Output = T>","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m: cannot add `&T` to `&T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tensor/mod.rs:104:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            result[i] = &self[i] + &rhs[i];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m&T\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m&T\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<T: TensorType + Add<&T, Output = T>, const N: usize> Add for &Tensor<T, N>\u001b[0m\u001b[0m\u001b[38;5;10m where &T: Add<&T, Output = T>\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0369, E0637.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0369, E0637.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0369`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0369`.\u001b[0m\n"}
